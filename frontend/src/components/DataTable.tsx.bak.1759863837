import React from 'react'

/**
 * Универсальная таблица:
 * - actions-колонка (узкая, без заголовка)
 * - поддержка width/nowrap/className у колонок
 * - никакого строкового склеивания JSX — только валидный TSX
 */
export type Column<T> = {
  key: keyof T | string
  title: string
  width?: string
  nowrap?: boolean
  className?: string
}

export default function DataTable<T extends { id?: string }>({
  columns,
  rows,
  onEdit,
  onDelete,
  canEditRow,
}: {
  columns: Column<T>[]
  rows: T[]
  onEdit?: (row: T) => void
  onDelete?: (id: string) => void
  canEditRow?: (row: T) => boolean
}) {
  const renderCell = (row: T, col: Column<T>) => {
    const key = String(col.key)
    // @ts-ignore — доступ по индексу
    const raw = row[key]
    const val = raw == null ? '' : String(raw)
    const tdClass =
      (col.nowrap ? 'whitespace-nowrap ' : 'whitespace-normal break-words ') +
      (col.className ?? '')
    return (
      <td
        key={key}
        className={`px-2 py-1.5 border-b border-white/5 align-top ${tdClass}`}
        title={val}
      >
        {val}
      </td>
    )
  }

  return (
    <div className="w-full overflow-x-auto rounded-2xl">
      <table className="w-full table-auto text-[11px] md:text-[12px] leading-4">
        {/* Ширины колонок */}
        <colgroup>
          {/* actions */}
          <col style={{ width: '60px' }} />
          {columns.map((c) => (
            <col
              key={String(c.key)}
              style={c.width ? { width: c.width } : undefined}
            />
          ))}
        </colgroup>

        <thead>
          <tr className="text-left">
            {/* пустой th вместо названия "Действия" */}
            <th className="px-1 py-1 border-b border-white/10" />
            {columns.map((c) => (
              <th
                key={String(c.key)}
                className={`px-2 py-2 border-b border-white/10 whitespace-nowrap ${c.className ?? ''}`}
              >
                {c.title}
              </th>
            ))}
          </tr>
        </thead>

        <tbody>
          {rows.map((r) => {
            const id = r.id ?? ''
            const allowed = canEditRow ? !!canEditRow(r) : true
            return (
              <tr key={id || Math.random()} className="border-t border-white/15 hover:bg-white/10">
                {/* actions */}
                <td className="px-1 py-1 border-b border-white/5 {c?.nowrap?\"whitespace-nowrap\":\"whitespace-normal break-words\"} {c?.className??\"\"}\"\2
                  <div className="flex items-center gap-1">
                    {onEdit && (
                      <button
                        title={allowed ? 'Редактировать' : 'Нет прав'}
                        className="tile-btn w-8 h-8 p-0 flex items-center justify-center"
                        onClick={() => allowed && onEdit(r)}
                        disabled={!allowed}
                      >
                        ✎
                      </button>
                    )}
                    {onDelete && (
                      <button
                        title={allowed ? 'Удалить' : 'Нет прав'}
                        className="tile-btn w-8 h-8 p-0 flex items-center justify-center"
                        onClick={() => allowed && onDelete(id)}
                        disabled={!allowed || !id}
                      >
                        ✕
                      </button>
                    )}
                  </div>
                </td>

                {/* data cells */}
                {columns.map((c) => renderCell(r, c))}
              </tr>
            )
          })}
        </tbody>
      </table>
    </div>
  )
}
