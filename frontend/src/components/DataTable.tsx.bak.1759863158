type Column<T> = { key: keyof T | string; title: string; width?: string | number; render?: (row: T) => React.ReactNode }
type Props<T> = {
  columns: Column<T>[]
  rows: T[]
  onEdit?: (row: T) => void
  onDelete?: (id: string) => void
  canEditRow?: (row: T) => boolean
}

export default function DataTable<T extends { id: string }>({ columns, rows, onEdit, onDelete, canEditRow }: Props<T>) {
  const cols = [{ key: '__actions__', title: '' }, ...columns]
  return (
    <div className="glass rounded-2xl overflow-auto">
      <table className="min-w-full text-left">
        {columns && (
  <colgroup>
    {/* actions col (narrow) */}
    <col style={{ width: '60px' }} />
    {columns.map((c)=> (
      <col key={String(c.key)} style={c.width?{width:c.width}:{}} />
    ))}
  </colgroup>
)}
<thead className="text-slate-200 whitespace-nowrap">
          <tr>
            {cols.map(c => (
              <th key={String(c.key)} style={{ width: c.width }} className="px-4 py-2 font-medium">{c.title}</th>
            ))}
          </tr>
        </thead>
        <tbody className="text-slate-100">
          {rows.map(r => {
            const allowed = canEditRow ? canEditRow(r) : true
            return (
              <tr key={r.id} className="border-t border-white/15 hover:bg-white/10">
                <td className="px-4 py-2 {c?.nowrap ? "whitespace-nowrap" : "whitespace-normal break-words"} {c?.className??\"\"}\"\2
                  <div className="flex gap-2 {c?.nowrap?\"whitespace-nowrap\":\"whitespace-normal break-words\"} {c?.className??\"\"}\"\2
                    {onEdit && (
                      <button title="Редактировать"
                        className={`px-2 py-1 rounded-lg ${allowed ? 'bg-white/10 hover:bg-white/20' : 'bg-white/5 opacity-50 cursor-not-allowed'}`}
                        onClick={() => allowed && onEdit(r)}
                        disabled={!allowed}
                      >✎</button>
                    )}
                    {onDelete && (
                      <button title="Удалить"
                        className={`px-2 py-1 rounded-lg ${allowed ? 'bg-white/10 hover:bg-white/20' : 'bg-white/5 opacity-50 cursor-not-allowed'}`}
                        onClick={() => allowed && onDelete(r.id)}
                        disabled={!allowed}
                      >✕</button>
                    )}
                  </div>
                </td>
                {columns.map(c => (
                  <td key={String(c.key)} className="px-4 py-2 {c?.nowrap ? "whitespace-nowrap" : "whitespace-normal break-words"} {c?.className??\"\"}\"\2
                    {c.render ? c.render(r) : String((r as any)[c.key as any] ?? '')}
                  </td>
                ))}
              </tr>
            )
          })}
        </tbody>
      </table>
    </div>
  )
}
